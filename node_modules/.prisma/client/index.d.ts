
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Workouts
 * 
 */
export type Workouts = $Result.DefaultSelection<Prisma.$WorkoutsPayload>
/**
 * Model Weight
 * 
 */
export type Weight = $Result.DefaultSelection<Prisma.$WeightPayload>
/**
 * Model LoadProgression
 * 
 */
export type LoadProgression = $Result.DefaultSelection<Prisma.$LoadProgressionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TrainingType: {
  Peito: 'Peito',
  Triceps: 'Triceps',
  Costas: 'Costas',
  Biceps: 'Biceps',
  Ombro: 'Ombro',
  Perna: 'Perna',
  Posterior_de_coxa: 'Posterior_de_coxa',
  Gluteo: 'Gluteo',
  DayOff: 'DayOff'
};

export type TrainingType = (typeof TrainingType)[keyof typeof TrainingType]

}

export type TrainingType = $Enums.TrainingType

export const TrainingType: typeof $Enums.TrainingType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.workouts`: Exposes CRUD operations for the **Workouts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workouts.findMany()
    * ```
    */
  get workouts(): Prisma.WorkoutsDelegate<ExtArgs>;

  /**
   * `prisma.weight`: Exposes CRUD operations for the **Weight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weights
    * const weights = await prisma.weight.findMany()
    * ```
    */
  get weight(): Prisma.WeightDelegate<ExtArgs>;

  /**
   * `prisma.loadProgression`: Exposes CRUD operations for the **LoadProgression** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoadProgressions
    * const loadProgressions = await prisma.loadProgression.findMany()
    * ```
    */
  get loadProgression(): Prisma.LoadProgressionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Workouts: 'Workouts',
    Weight: 'Weight',
    LoadProgression: 'LoadProgression'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'workouts' | 'weight' | 'loadProgression'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Workouts: {
        payload: Prisma.$WorkoutsPayload<ExtArgs>
        fields: Prisma.WorkoutsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          findFirst: {
            args: Prisma.WorkoutsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          findMany: {
            args: Prisma.WorkoutsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>[]
          }
          create: {
            args: Prisma.WorkoutsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          createMany: {
            args: Prisma.WorkoutsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkoutsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          update: {
            args: Prisma.WorkoutsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutsPayload>
          }
          aggregate: {
            args: Prisma.WorkoutsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkouts>
          }
          groupBy: {
            args: Prisma.WorkoutsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutsCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutsCountAggregateOutputType> | number
          }
        }
      }
      Weight: {
        payload: Prisma.$WeightPayload<ExtArgs>
        fields: Prisma.WeightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeightFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeightFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          findFirst: {
            args: Prisma.WeightFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeightFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          findMany: {
            args: Prisma.WeightFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>[]
          }
          create: {
            args: Prisma.WeightCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          createMany: {
            args: Prisma.WeightCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WeightDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          update: {
            args: Prisma.WeightUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          deleteMany: {
            args: Prisma.WeightDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeightUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeightUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeightPayload>
          }
          aggregate: {
            args: Prisma.WeightAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeight>
          }
          groupBy: {
            args: Prisma.WeightGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeightGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeightCountArgs<ExtArgs>,
            result: $Utils.Optional<WeightCountAggregateOutputType> | number
          }
        }
      }
      LoadProgression: {
        payload: Prisma.$LoadProgressionPayload<ExtArgs>
        fields: Prisma.LoadProgressionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoadProgressionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoadProgressionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          findFirst: {
            args: Prisma.LoadProgressionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoadProgressionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          findMany: {
            args: Prisma.LoadProgressionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>[]
          }
          create: {
            args: Prisma.LoadProgressionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          createMany: {
            args: Prisma.LoadProgressionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoadProgressionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          update: {
            args: Prisma.LoadProgressionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          deleteMany: {
            args: Prisma.LoadProgressionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoadProgressionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoadProgressionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoadProgressionPayload>
          }
          aggregate: {
            args: Prisma.LoadProgressionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoadProgression>
          }
          groupBy: {
            args: Prisma.LoadProgressionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoadProgressionGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoadProgressionCountArgs<ExtArgs>,
            result: $Utils.Optional<LoadProgressionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    workouts: number
    weights: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | UserCountOutputTypeCountWorkoutsArgs
    weights?: boolean | UserCountOutputTypeCountWeightsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeightWhereInput
  }


  /**
   * Count Type WorkoutsCountOutputType
   */

  export type WorkoutsCountOutputType = {
    loadProgressions: number
  }

  export type WorkoutsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loadProgressions?: boolean | WorkoutsCountOutputTypeCountLoadProgressionsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutsCountOutputType without action
   */
  export type WorkoutsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutsCountOutputType
     */
    select?: WorkoutsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutsCountOutputType without action
   */
  export type WorkoutsCountOutputTypeCountLoadProgressionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadProgressionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password_hash: string | null
    age: number | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password_hash: string | null
    age: number | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password_hash: number
    age: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    age?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    age?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    age?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    age?: boolean
    created_at?: boolean
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    weights?: boolean | User$weightsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    age?: boolean
    created_at?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | User$workoutsArgs<ExtArgs>
    weights?: boolean | User$weightsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      workouts: Prisma.$WorkoutsPayload<ExtArgs>[]
      weights: Prisma.$WeightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password_hash: string
      age: number
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    workouts<T extends User$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findMany'> | Null>;

    weights<T extends User$weightsArgs<ExtArgs> = {}>(args?: Subset<T, User$weightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.workouts
   */
  export type User$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    where?: WorkoutsWhereInput
    orderBy?: WorkoutsOrderByWithRelationInput | WorkoutsOrderByWithRelationInput[]
    cursor?: WorkoutsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutsScalarFieldEnum | WorkoutsScalarFieldEnum[]
  }

  /**
   * User.weights
   */
  export type User$weightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    where?: WeightWhereInput
    orderBy?: WeightOrderByWithRelationInput | WeightOrderByWithRelationInput[]
    cursor?: WeightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeightScalarFieldEnum | WeightScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Workouts
   */

  export type AggregateWorkouts = {
    _count: WorkoutsCountAggregateOutputType | null
    _avg: WorkoutsAvgAggregateOutputType | null
    _sum: WorkoutsSumAggregateOutputType | null
    _min: WorkoutsMinAggregateOutputType | null
    _max: WorkoutsMaxAggregateOutputType | null
  }

  export type WorkoutsAvgAggregateOutputType = {
    cardio_minutes: number | null
  }

  export type WorkoutsSumAggregateOutputType = {
    cardio_minutes: number | null
  }

  export type WorkoutsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    training: $Enums.TrainingType | null
    cardio_minutes: number | null
    details: string | null
    created_at: Date | null
  }

  export type WorkoutsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    training: $Enums.TrainingType | null
    cardio_minutes: number | null
    details: string | null
    created_at: Date | null
  }

  export type WorkoutsCountAggregateOutputType = {
    id: number
    userId: number
    training: number
    cardio_minutes: number
    details: number
    created_at: number
    _all: number
  }


  export type WorkoutsAvgAggregateInputType = {
    cardio_minutes?: true
  }

  export type WorkoutsSumAggregateInputType = {
    cardio_minutes?: true
  }

  export type WorkoutsMinAggregateInputType = {
    id?: true
    userId?: true
    training?: true
    cardio_minutes?: true
    details?: true
    created_at?: true
  }

  export type WorkoutsMaxAggregateInputType = {
    id?: true
    userId?: true
    training?: true
    cardio_minutes?: true
    details?: true
    created_at?: true
  }

  export type WorkoutsCountAggregateInputType = {
    id?: true
    userId?: true
    training?: true
    cardio_minutes?: true
    details?: true
    created_at?: true
    _all?: true
  }

  export type WorkoutsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to aggregate.
     */
    where?: WorkoutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutsOrderByWithRelationInput | WorkoutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutsMaxAggregateInputType
  }

  export type GetWorkoutsAggregateType<T extends WorkoutsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkouts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkouts[P]>
      : GetScalarType<T[P], AggregateWorkouts[P]>
  }




  export type WorkoutsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutsWhereInput
    orderBy?: WorkoutsOrderByWithAggregationInput | WorkoutsOrderByWithAggregationInput[]
    by: WorkoutsScalarFieldEnum[] | WorkoutsScalarFieldEnum
    having?: WorkoutsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutsCountAggregateInputType | true
    _avg?: WorkoutsAvgAggregateInputType
    _sum?: WorkoutsSumAggregateInputType
    _min?: WorkoutsMinAggregateInputType
    _max?: WorkoutsMaxAggregateInputType
  }

  export type WorkoutsGroupByOutputType = {
    id: string
    userId: string
    training: $Enums.TrainingType
    cardio_minutes: number
    details: string | null
    created_at: Date
    _count: WorkoutsCountAggregateOutputType | null
    _avg: WorkoutsAvgAggregateOutputType | null
    _sum: WorkoutsSumAggregateOutputType | null
    _min: WorkoutsMinAggregateOutputType | null
    _max: WorkoutsMaxAggregateOutputType | null
  }

  type GetWorkoutsGroupByPayload<T extends WorkoutsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutsGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    training?: boolean
    cardio_minutes?: boolean
    details?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    loadProgressions?: boolean | Workouts$loadProgressionsArgs<ExtArgs>
    _count?: boolean | WorkoutsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workouts"]>

  export type WorkoutsSelectScalar = {
    id?: boolean
    userId?: boolean
    training?: boolean
    cardio_minutes?: boolean
    details?: boolean
    created_at?: boolean
  }


  export type WorkoutsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    loadProgressions?: boolean | Workouts$loadProgressionsArgs<ExtArgs>
    _count?: boolean | WorkoutsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WorkoutsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workouts"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      loadProgressions: Prisma.$LoadProgressionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      training: $Enums.TrainingType
      cardio_minutes: number
      details: string | null
      created_at: Date
    }, ExtArgs["result"]["workouts"]>
    composites: {}
  }


  type WorkoutsGetPayload<S extends boolean | null | undefined | WorkoutsDefaultArgs> = $Result.GetResult<Prisma.$WorkoutsPayload, S>

  type WorkoutsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutsCountAggregateInputType | true
    }

  export interface WorkoutsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workouts'], meta: { name: 'Workouts' } }
    /**
     * Find zero or one Workouts that matches the filter.
     * @param {WorkoutsFindUniqueArgs} args - Arguments to find a Workouts
     * @example
     * // Get one Workouts
     * const workouts = await prisma.workouts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkoutsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Workouts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkoutsFindUniqueOrThrowArgs} args - Arguments to find a Workouts
     * @example
     * // Get one Workouts
     * const workouts = await prisma.workouts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkoutsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsFindFirstArgs} args - Arguments to find a Workouts
     * @example
     * // Get one Workouts
     * const workouts = await prisma.workouts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkoutsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsFindFirstArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Workouts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsFindFirstOrThrowArgs} args - Arguments to find a Workouts
     * @example
     * // Get one Workouts
     * const workouts = await prisma.workouts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkoutsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workouts.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workouts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutsWithIdOnly = await prisma.workouts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkoutsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Workouts.
     * @param {WorkoutsCreateArgs} args - Arguments to create a Workouts.
     * @example
     * // Create one Workouts
     * const Workouts = await prisma.workouts.create({
     *   data: {
     *     // ... data to create a Workouts
     *   }
     * })
     * 
    **/
    create<T extends WorkoutsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsCreateArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Workouts.
     *     @param {WorkoutsCreateManyArgs} args - Arguments to create many Workouts.
     *     @example
     *     // Create many Workouts
     *     const workouts = await prisma.workouts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkoutsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Workouts.
     * @param {WorkoutsDeleteArgs} args - Arguments to delete one Workouts.
     * @example
     * // Delete one Workouts
     * const Workouts = await prisma.workouts.delete({
     *   where: {
     *     // ... filter to delete one Workouts
     *   }
     * })
     * 
    **/
    delete<T extends WorkoutsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsDeleteArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Workouts.
     * @param {WorkoutsUpdateArgs} args - Arguments to update one Workouts.
     * @example
     * // Update one Workouts
     * const workouts = await prisma.workouts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkoutsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsUpdateArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutsDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workouts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkoutsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workouts = await prisma.workouts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkoutsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workouts.
     * @param {WorkoutsUpsertArgs} args - Arguments to update or create a Workouts.
     * @example
     * // Update or create a Workouts
     * const workouts = await prisma.workouts.upsert({
     *   create: {
     *     // ... data to create a Workouts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workouts we want to update
     *   }
     * })
    **/
    upsert<T extends WorkoutsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutsUpsertArgs<ExtArgs>>
    ): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workouts.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutsCountArgs>(
      args?: Subset<T, WorkoutsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutsAggregateArgs>(args: Subset<T, WorkoutsAggregateArgs>): Prisma.PrismaPromise<GetWorkoutsAggregateType<T>>

    /**
     * Group by Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutsGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workouts model
   */
  readonly fields: WorkoutsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workouts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    loadProgressions<T extends Workouts$loadProgressionsArgs<ExtArgs> = {}>(args?: Subset<T, Workouts$loadProgressionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Workouts model
   */ 
  interface WorkoutsFieldRefs {
    readonly id: FieldRef<"Workouts", 'String'>
    readonly userId: FieldRef<"Workouts", 'String'>
    readonly training: FieldRef<"Workouts", 'TrainingType'>
    readonly cardio_minutes: FieldRef<"Workouts", 'Int'>
    readonly details: FieldRef<"Workouts", 'String'>
    readonly created_at: FieldRef<"Workouts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Workouts findUnique
   */
  export type WorkoutsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where: WorkoutsWhereUniqueInput
  }

  /**
   * Workouts findUniqueOrThrow
   */
  export type WorkoutsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where: WorkoutsWhereUniqueInput
  }

  /**
   * Workouts findFirst
   */
  export type WorkoutsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutsOrderByWithRelationInput | WorkoutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutsScalarFieldEnum | WorkoutsScalarFieldEnum[]
  }

  /**
   * Workouts findFirstOrThrow
   */
  export type WorkoutsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutsOrderByWithRelationInput | WorkoutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutsScalarFieldEnum | WorkoutsScalarFieldEnum[]
  }

  /**
   * Workouts findMany
   */
  export type WorkoutsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutsOrderByWithRelationInput | WorkoutsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutsScalarFieldEnum | WorkoutsScalarFieldEnum[]
  }

  /**
   * Workouts create
   */
  export type WorkoutsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * The data needed to create a Workouts.
     */
    data: XOR<WorkoutsCreateInput, WorkoutsUncheckedCreateInput>
  }

  /**
   * Workouts createMany
   */
  export type WorkoutsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutsCreateManyInput | WorkoutsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workouts update
   */
  export type WorkoutsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * The data needed to update a Workouts.
     */
    data: XOR<WorkoutsUpdateInput, WorkoutsUncheckedUpdateInput>
    /**
     * Choose, which Workouts to update.
     */
    where: WorkoutsWhereUniqueInput
  }

  /**
   * Workouts updateMany
   */
  export type WorkoutsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutsUpdateManyMutationInput, WorkoutsUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutsWhereInput
  }

  /**
   * Workouts upsert
   */
  export type WorkoutsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * The filter to search for the Workouts to update in case it exists.
     */
    where: WorkoutsWhereUniqueInput
    /**
     * In case the Workouts found by the `where` argument doesn't exist, create a new Workouts with this data.
     */
    create: XOR<WorkoutsCreateInput, WorkoutsUncheckedCreateInput>
    /**
     * In case the Workouts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutsUpdateInput, WorkoutsUncheckedUpdateInput>
  }

  /**
   * Workouts delete
   */
  export type WorkoutsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
    /**
     * Filter which Workouts to delete.
     */
    where: WorkoutsWhereUniqueInput
  }

  /**
   * Workouts deleteMany
   */
  export type WorkoutsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutsWhereInput
  }

  /**
   * Workouts.loadProgressions
   */
  export type Workouts$loadProgressionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    where?: LoadProgressionWhereInput
    orderBy?: LoadProgressionOrderByWithRelationInput | LoadProgressionOrderByWithRelationInput[]
    cursor?: LoadProgressionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoadProgressionScalarFieldEnum | LoadProgressionScalarFieldEnum[]
  }

  /**
   * Workouts without action
   */
  export type WorkoutsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workouts
     */
    select?: WorkoutsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutsInclude<ExtArgs> | null
  }


  /**
   * Model Weight
   */

  export type AggregateWeight = {
    _count: WeightCountAggregateOutputType | null
    _avg: WeightAvgAggregateOutputType | null
    _sum: WeightSumAggregateOutputType | null
    _min: WeightMinAggregateOutputType | null
    _max: WeightMaxAggregateOutputType | null
  }

  export type WeightAvgAggregateOutputType = {
    currentWeight: Decimal | null
    targetWeight: Decimal | null
  }

  export type WeightSumAggregateOutputType = {
    currentWeight: Decimal | null
    targetWeight: Decimal | null
  }

  export type WeightMinAggregateOutputType = {
    id: string | null
    userId: string | null
    currentWeight: Decimal | null
    targetWeight: Decimal | null
    recorded_at: Date | null
  }

  export type WeightMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    currentWeight: Decimal | null
    targetWeight: Decimal | null
    recorded_at: Date | null
  }

  export type WeightCountAggregateOutputType = {
    id: number
    userId: number
    currentWeight: number
    targetWeight: number
    recorded_at: number
    _all: number
  }


  export type WeightAvgAggregateInputType = {
    currentWeight?: true
    targetWeight?: true
  }

  export type WeightSumAggregateInputType = {
    currentWeight?: true
    targetWeight?: true
  }

  export type WeightMinAggregateInputType = {
    id?: true
    userId?: true
    currentWeight?: true
    targetWeight?: true
    recorded_at?: true
  }

  export type WeightMaxAggregateInputType = {
    id?: true
    userId?: true
    currentWeight?: true
    targetWeight?: true
    recorded_at?: true
  }

  export type WeightCountAggregateInputType = {
    id?: true
    userId?: true
    currentWeight?: true
    targetWeight?: true
    recorded_at?: true
    _all?: true
  }

  export type WeightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weight to aggregate.
     */
    where?: WeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weights to fetch.
     */
    orderBy?: WeightOrderByWithRelationInput | WeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weights
    **/
    _count?: true | WeightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeightMaxAggregateInputType
  }

  export type GetWeightAggregateType<T extends WeightAggregateArgs> = {
        [P in keyof T & keyof AggregateWeight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeight[P]>
      : GetScalarType<T[P], AggregateWeight[P]>
  }




  export type WeightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeightWhereInput
    orderBy?: WeightOrderByWithAggregationInput | WeightOrderByWithAggregationInput[]
    by: WeightScalarFieldEnum[] | WeightScalarFieldEnum
    having?: WeightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeightCountAggregateInputType | true
    _avg?: WeightAvgAggregateInputType
    _sum?: WeightSumAggregateInputType
    _min?: WeightMinAggregateInputType
    _max?: WeightMaxAggregateInputType
  }

  export type WeightGroupByOutputType = {
    id: string
    userId: string
    currentWeight: Decimal
    targetWeight: Decimal | null
    recorded_at: Date
    _count: WeightCountAggregateOutputType | null
    _avg: WeightAvgAggregateOutputType | null
    _sum: WeightSumAggregateOutputType | null
    _min: WeightMinAggregateOutputType | null
    _max: WeightMaxAggregateOutputType | null
  }

  type GetWeightGroupByPayload<T extends WeightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeightGroupByOutputType[P]>
            : GetScalarType<T[P], WeightGroupByOutputType[P]>
        }
      >
    >


  export type WeightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    recorded_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weight"]>

  export type WeightSelectScalar = {
    id?: boolean
    userId?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    recorded_at?: boolean
  }


  export type WeightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $WeightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Weight"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      currentWeight: Prisma.Decimal
      targetWeight: Prisma.Decimal | null
      recorded_at: Date
    }, ExtArgs["result"]["weight"]>
    composites: {}
  }


  type WeightGetPayload<S extends boolean | null | undefined | WeightDefaultArgs> = $Result.GetResult<Prisma.$WeightPayload, S>

  type WeightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeightFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeightCountAggregateInputType | true
    }

  export interface WeightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Weight'], meta: { name: 'Weight' } }
    /**
     * Find zero or one Weight that matches the filter.
     * @param {WeightFindUniqueArgs} args - Arguments to find a Weight
     * @example
     * // Get one Weight
     * const weight = await prisma.weight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeightFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeightFindUniqueArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Weight that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeightFindUniqueOrThrowArgs} args - Arguments to find a Weight
     * @example
     * // Get one Weight
     * const weight = await prisma.weight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeightFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Weight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightFindFirstArgs} args - Arguments to find a Weight
     * @example
     * // Get one Weight
     * const weight = await prisma.weight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeightFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightFindFirstArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Weight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightFindFirstOrThrowArgs} args - Arguments to find a Weight
     * @example
     * // Get one Weight
     * const weight = await prisma.weight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeightFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Weights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weights
     * const weights = await prisma.weight.findMany()
     * 
     * // Get first 10 Weights
     * const weights = await prisma.weight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weightWithIdOnly = await prisma.weight.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeightFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Weight.
     * @param {WeightCreateArgs} args - Arguments to create a Weight.
     * @example
     * // Create one Weight
     * const Weight = await prisma.weight.create({
     *   data: {
     *     // ... data to create a Weight
     *   }
     * })
     * 
    **/
    create<T extends WeightCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeightCreateArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Weights.
     *     @param {WeightCreateManyArgs} args - Arguments to create many Weights.
     *     @example
     *     // Create many Weights
     *     const weight = await prisma.weight.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeightCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Weight.
     * @param {WeightDeleteArgs} args - Arguments to delete one Weight.
     * @example
     * // Delete one Weight
     * const Weight = await prisma.weight.delete({
     *   where: {
     *     // ... filter to delete one Weight
     *   }
     * })
     * 
    **/
    delete<T extends WeightDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeightDeleteArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Weight.
     * @param {WeightUpdateArgs} args - Arguments to update one Weight.
     * @example
     * // Update one Weight
     * const weight = await prisma.weight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeightUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeightUpdateArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Weights.
     * @param {WeightDeleteManyArgs} args - Arguments to filter Weights to delete.
     * @example
     * // Delete a few Weights
     * const { count } = await prisma.weight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeightDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeightDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weights
     * const weight = await prisma.weight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeightUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeightUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Weight.
     * @param {WeightUpsertArgs} args - Arguments to update or create a Weight.
     * @example
     * // Update or create a Weight
     * const weight = await prisma.weight.upsert({
     *   create: {
     *     // ... data to create a Weight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Weight we want to update
     *   }
     * })
    **/
    upsert<T extends WeightUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeightUpsertArgs<ExtArgs>>
    ): Prisma__WeightClient<$Result.GetResult<Prisma.$WeightPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Weights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightCountArgs} args - Arguments to filter Weights to count.
     * @example
     * // Count the number of Weights
     * const count = await prisma.weight.count({
     *   where: {
     *     // ... the filter for the Weights we want to count
     *   }
     * })
    **/
    count<T extends WeightCountArgs>(
      args?: Subset<T, WeightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Weight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeightAggregateArgs>(args: Subset<T, WeightAggregateArgs>): Prisma.PrismaPromise<GetWeightAggregateType<T>>

    /**
     * Group by Weight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeightGroupByArgs['orderBy'] }
        : { orderBy?: WeightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Weight model
   */
  readonly fields: WeightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Weight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Weight model
   */ 
  interface WeightFieldRefs {
    readonly id: FieldRef<"Weight", 'String'>
    readonly userId: FieldRef<"Weight", 'String'>
    readonly currentWeight: FieldRef<"Weight", 'Decimal'>
    readonly targetWeight: FieldRef<"Weight", 'Decimal'>
    readonly recorded_at: FieldRef<"Weight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Weight findUnique
   */
  export type WeightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter, which Weight to fetch.
     */
    where: WeightWhereUniqueInput
  }

  /**
   * Weight findUniqueOrThrow
   */
  export type WeightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter, which Weight to fetch.
     */
    where: WeightWhereUniqueInput
  }

  /**
   * Weight findFirst
   */
  export type WeightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter, which Weight to fetch.
     */
    where?: WeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weights to fetch.
     */
    orderBy?: WeightOrderByWithRelationInput | WeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weights.
     */
    cursor?: WeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weights.
     */
    distinct?: WeightScalarFieldEnum | WeightScalarFieldEnum[]
  }

  /**
   * Weight findFirstOrThrow
   */
  export type WeightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter, which Weight to fetch.
     */
    where?: WeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weights to fetch.
     */
    orderBy?: WeightOrderByWithRelationInput | WeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weights.
     */
    cursor?: WeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weights.
     */
    distinct?: WeightScalarFieldEnum | WeightScalarFieldEnum[]
  }

  /**
   * Weight findMany
   */
  export type WeightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter, which Weights to fetch.
     */
    where?: WeightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weights to fetch.
     */
    orderBy?: WeightOrderByWithRelationInput | WeightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weights.
     */
    cursor?: WeightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weights.
     */
    skip?: number
    distinct?: WeightScalarFieldEnum | WeightScalarFieldEnum[]
  }

  /**
   * Weight create
   */
  export type WeightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * The data needed to create a Weight.
     */
    data: XOR<WeightCreateInput, WeightUncheckedCreateInput>
  }

  /**
   * Weight createMany
   */
  export type WeightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weights.
     */
    data: WeightCreateManyInput | WeightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Weight update
   */
  export type WeightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * The data needed to update a Weight.
     */
    data: XOR<WeightUpdateInput, WeightUncheckedUpdateInput>
    /**
     * Choose, which Weight to update.
     */
    where: WeightWhereUniqueInput
  }

  /**
   * Weight updateMany
   */
  export type WeightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weights.
     */
    data: XOR<WeightUpdateManyMutationInput, WeightUncheckedUpdateManyInput>
    /**
     * Filter which Weights to update
     */
    where?: WeightWhereInput
  }

  /**
   * Weight upsert
   */
  export type WeightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * The filter to search for the Weight to update in case it exists.
     */
    where: WeightWhereUniqueInput
    /**
     * In case the Weight found by the `where` argument doesn't exist, create a new Weight with this data.
     */
    create: XOR<WeightCreateInput, WeightUncheckedCreateInput>
    /**
     * In case the Weight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeightUpdateInput, WeightUncheckedUpdateInput>
  }

  /**
   * Weight delete
   */
  export type WeightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
    /**
     * Filter which Weight to delete.
     */
    where: WeightWhereUniqueInput
  }

  /**
   * Weight deleteMany
   */
  export type WeightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weights to delete
     */
    where?: WeightWhereInput
  }

  /**
   * Weight without action
   */
  export type WeightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weight
     */
    select?: WeightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightInclude<ExtArgs> | null
  }


  /**
   * Model LoadProgression
   */

  export type AggregateLoadProgression = {
    _count: LoadProgressionCountAggregateOutputType | null
    _avg: LoadProgressionAvgAggregateOutputType | null
    _sum: LoadProgressionSumAggregateOutputType | null
    _min: LoadProgressionMinAggregateOutputType | null
    _max: LoadProgressionMaxAggregateOutputType | null
  }

  export type LoadProgressionAvgAggregateOutputType = {
    currentLoad: Decimal | null
    goalLoad: Decimal | null
  }

  export type LoadProgressionSumAggregateOutputType = {
    currentLoad: Decimal | null
    goalLoad: Decimal | null
  }

  export type LoadProgressionMinAggregateOutputType = {
    id: string | null
    workoutDetailId: string | null
    exercise: string | null
    date: Date | null
    currentLoad: Decimal | null
    goalLoad: Decimal | null
  }

  export type LoadProgressionMaxAggregateOutputType = {
    id: string | null
    workoutDetailId: string | null
    exercise: string | null
    date: Date | null
    currentLoad: Decimal | null
    goalLoad: Decimal | null
  }

  export type LoadProgressionCountAggregateOutputType = {
    id: number
    workoutDetailId: number
    exercise: number
    date: number
    currentLoad: number
    goalLoad: number
    _all: number
  }


  export type LoadProgressionAvgAggregateInputType = {
    currentLoad?: true
    goalLoad?: true
  }

  export type LoadProgressionSumAggregateInputType = {
    currentLoad?: true
    goalLoad?: true
  }

  export type LoadProgressionMinAggregateInputType = {
    id?: true
    workoutDetailId?: true
    exercise?: true
    date?: true
    currentLoad?: true
    goalLoad?: true
  }

  export type LoadProgressionMaxAggregateInputType = {
    id?: true
    workoutDetailId?: true
    exercise?: true
    date?: true
    currentLoad?: true
    goalLoad?: true
  }

  export type LoadProgressionCountAggregateInputType = {
    id?: true
    workoutDetailId?: true
    exercise?: true
    date?: true
    currentLoad?: true
    goalLoad?: true
    _all?: true
  }

  export type LoadProgressionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoadProgression to aggregate.
     */
    where?: LoadProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadProgressions to fetch.
     */
    orderBy?: LoadProgressionOrderByWithRelationInput | LoadProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoadProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadProgressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadProgressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoadProgressions
    **/
    _count?: true | LoadProgressionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoadProgressionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoadProgressionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoadProgressionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoadProgressionMaxAggregateInputType
  }

  export type GetLoadProgressionAggregateType<T extends LoadProgressionAggregateArgs> = {
        [P in keyof T & keyof AggregateLoadProgression]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoadProgression[P]>
      : GetScalarType<T[P], AggregateLoadProgression[P]>
  }




  export type LoadProgressionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadProgressionWhereInput
    orderBy?: LoadProgressionOrderByWithAggregationInput | LoadProgressionOrderByWithAggregationInput[]
    by: LoadProgressionScalarFieldEnum[] | LoadProgressionScalarFieldEnum
    having?: LoadProgressionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoadProgressionCountAggregateInputType | true
    _avg?: LoadProgressionAvgAggregateInputType
    _sum?: LoadProgressionSumAggregateInputType
    _min?: LoadProgressionMinAggregateInputType
    _max?: LoadProgressionMaxAggregateInputType
  }

  export type LoadProgressionGroupByOutputType = {
    id: string
    workoutDetailId: string
    exercise: string
    date: Date
    currentLoad: Decimal
    goalLoad: Decimal | null
    _count: LoadProgressionCountAggregateOutputType | null
    _avg: LoadProgressionAvgAggregateOutputType | null
    _sum: LoadProgressionSumAggregateOutputType | null
    _min: LoadProgressionMinAggregateOutputType | null
    _max: LoadProgressionMaxAggregateOutputType | null
  }

  type GetLoadProgressionGroupByPayload<T extends LoadProgressionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoadProgressionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoadProgressionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoadProgressionGroupByOutputType[P]>
            : GetScalarType<T[P], LoadProgressionGroupByOutputType[P]>
        }
      >
    >


  export type LoadProgressionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutDetailId?: boolean
    exercise?: boolean
    date?: boolean
    currentLoad?: boolean
    goalLoad?: boolean
    workoutDetail?: boolean | WorkoutsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loadProgression"]>

  export type LoadProgressionSelectScalar = {
    id?: boolean
    workoutDetailId?: boolean
    exercise?: boolean
    date?: boolean
    currentLoad?: boolean
    goalLoad?: boolean
  }


  export type LoadProgressionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutDetail?: boolean | WorkoutsDefaultArgs<ExtArgs>
  }


  export type $LoadProgressionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoadProgression"
    objects: {
      workoutDetail: Prisma.$WorkoutsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutDetailId: string
      exercise: string
      date: Date
      currentLoad: Prisma.Decimal
      goalLoad: Prisma.Decimal | null
    }, ExtArgs["result"]["loadProgression"]>
    composites: {}
  }


  type LoadProgressionGetPayload<S extends boolean | null | undefined | LoadProgressionDefaultArgs> = $Result.GetResult<Prisma.$LoadProgressionPayload, S>

  type LoadProgressionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoadProgressionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoadProgressionCountAggregateInputType | true
    }

  export interface LoadProgressionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoadProgression'], meta: { name: 'LoadProgression' } }
    /**
     * Find zero or one LoadProgression that matches the filter.
     * @param {LoadProgressionFindUniqueArgs} args - Arguments to find a LoadProgression
     * @example
     * // Get one LoadProgression
     * const loadProgression = await prisma.loadProgression.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoadProgressionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionFindUniqueArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LoadProgression that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoadProgressionFindUniqueOrThrowArgs} args - Arguments to find a LoadProgression
     * @example
     * // Get one LoadProgression
     * const loadProgression = await prisma.loadProgression.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoadProgressionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LoadProgression that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionFindFirstArgs} args - Arguments to find a LoadProgression
     * @example
     * // Get one LoadProgression
     * const loadProgression = await prisma.loadProgression.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoadProgressionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionFindFirstArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LoadProgression that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionFindFirstOrThrowArgs} args - Arguments to find a LoadProgression
     * @example
     * // Get one LoadProgression
     * const loadProgression = await prisma.loadProgression.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoadProgressionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LoadProgressions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoadProgressions
     * const loadProgressions = await prisma.loadProgression.findMany()
     * 
     * // Get first 10 LoadProgressions
     * const loadProgressions = await prisma.loadProgression.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loadProgressionWithIdOnly = await prisma.loadProgression.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoadProgressionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LoadProgression.
     * @param {LoadProgressionCreateArgs} args - Arguments to create a LoadProgression.
     * @example
     * // Create one LoadProgression
     * const LoadProgression = await prisma.loadProgression.create({
     *   data: {
     *     // ... data to create a LoadProgression
     *   }
     * })
     * 
    **/
    create<T extends LoadProgressionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionCreateArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LoadProgressions.
     *     @param {LoadProgressionCreateManyArgs} args - Arguments to create many LoadProgressions.
     *     @example
     *     // Create many LoadProgressions
     *     const loadProgression = await prisma.loadProgression.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoadProgressionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LoadProgression.
     * @param {LoadProgressionDeleteArgs} args - Arguments to delete one LoadProgression.
     * @example
     * // Delete one LoadProgression
     * const LoadProgression = await prisma.loadProgression.delete({
     *   where: {
     *     // ... filter to delete one LoadProgression
     *   }
     * })
     * 
    **/
    delete<T extends LoadProgressionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionDeleteArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LoadProgression.
     * @param {LoadProgressionUpdateArgs} args - Arguments to update one LoadProgression.
     * @example
     * // Update one LoadProgression
     * const loadProgression = await prisma.loadProgression.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoadProgressionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionUpdateArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LoadProgressions.
     * @param {LoadProgressionDeleteManyArgs} args - Arguments to filter LoadProgressions to delete.
     * @example
     * // Delete a few LoadProgressions
     * const { count } = await prisma.loadProgression.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoadProgressionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoadProgressionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoadProgressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoadProgressions
     * const loadProgression = await prisma.loadProgression.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoadProgressionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LoadProgression.
     * @param {LoadProgressionUpsertArgs} args - Arguments to update or create a LoadProgression.
     * @example
     * // Update or create a LoadProgression
     * const loadProgression = await prisma.loadProgression.upsert({
     *   create: {
     *     // ... data to create a LoadProgression
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoadProgression we want to update
     *   }
     * })
    **/
    upsert<T extends LoadProgressionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoadProgressionUpsertArgs<ExtArgs>>
    ): Prisma__LoadProgressionClient<$Result.GetResult<Prisma.$LoadProgressionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LoadProgressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionCountArgs} args - Arguments to filter LoadProgressions to count.
     * @example
     * // Count the number of LoadProgressions
     * const count = await prisma.loadProgression.count({
     *   where: {
     *     // ... the filter for the LoadProgressions we want to count
     *   }
     * })
    **/
    count<T extends LoadProgressionCountArgs>(
      args?: Subset<T, LoadProgressionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadProgressionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoadProgression.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadProgressionAggregateArgs>(args: Subset<T, LoadProgressionAggregateArgs>): Prisma.PrismaPromise<GetLoadProgressionAggregateType<T>>

    /**
     * Group by LoadProgression.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadProgressionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoadProgressionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoadProgressionGroupByArgs['orderBy'] }
        : { orderBy?: LoadProgressionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoadProgressionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoadProgressionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoadProgression model
   */
  readonly fields: LoadProgressionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoadProgression.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoadProgressionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    workoutDetail<T extends WorkoutsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutsDefaultArgs<ExtArgs>>): Prisma__WorkoutsClient<$Result.GetResult<Prisma.$WorkoutsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LoadProgression model
   */ 
  interface LoadProgressionFieldRefs {
    readonly id: FieldRef<"LoadProgression", 'String'>
    readonly workoutDetailId: FieldRef<"LoadProgression", 'String'>
    readonly exercise: FieldRef<"LoadProgression", 'String'>
    readonly date: FieldRef<"LoadProgression", 'DateTime'>
    readonly currentLoad: FieldRef<"LoadProgression", 'Decimal'>
    readonly goalLoad: FieldRef<"LoadProgression", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * LoadProgression findUnique
   */
  export type LoadProgressionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter, which LoadProgression to fetch.
     */
    where: LoadProgressionWhereUniqueInput
  }

  /**
   * LoadProgression findUniqueOrThrow
   */
  export type LoadProgressionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter, which LoadProgression to fetch.
     */
    where: LoadProgressionWhereUniqueInput
  }

  /**
   * LoadProgression findFirst
   */
  export type LoadProgressionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter, which LoadProgression to fetch.
     */
    where?: LoadProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadProgressions to fetch.
     */
    orderBy?: LoadProgressionOrderByWithRelationInput | LoadProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoadProgressions.
     */
    cursor?: LoadProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadProgressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadProgressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoadProgressions.
     */
    distinct?: LoadProgressionScalarFieldEnum | LoadProgressionScalarFieldEnum[]
  }

  /**
   * LoadProgression findFirstOrThrow
   */
  export type LoadProgressionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter, which LoadProgression to fetch.
     */
    where?: LoadProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadProgressions to fetch.
     */
    orderBy?: LoadProgressionOrderByWithRelationInput | LoadProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoadProgressions.
     */
    cursor?: LoadProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadProgressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadProgressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoadProgressions.
     */
    distinct?: LoadProgressionScalarFieldEnum | LoadProgressionScalarFieldEnum[]
  }

  /**
   * LoadProgression findMany
   */
  export type LoadProgressionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter, which LoadProgressions to fetch.
     */
    where?: LoadProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadProgressions to fetch.
     */
    orderBy?: LoadProgressionOrderByWithRelationInput | LoadProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoadProgressions.
     */
    cursor?: LoadProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadProgressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadProgressions.
     */
    skip?: number
    distinct?: LoadProgressionScalarFieldEnum | LoadProgressionScalarFieldEnum[]
  }

  /**
   * LoadProgression create
   */
  export type LoadProgressionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * The data needed to create a LoadProgression.
     */
    data: XOR<LoadProgressionCreateInput, LoadProgressionUncheckedCreateInput>
  }

  /**
   * LoadProgression createMany
   */
  export type LoadProgressionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoadProgressions.
     */
    data: LoadProgressionCreateManyInput | LoadProgressionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoadProgression update
   */
  export type LoadProgressionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * The data needed to update a LoadProgression.
     */
    data: XOR<LoadProgressionUpdateInput, LoadProgressionUncheckedUpdateInput>
    /**
     * Choose, which LoadProgression to update.
     */
    where: LoadProgressionWhereUniqueInput
  }

  /**
   * LoadProgression updateMany
   */
  export type LoadProgressionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoadProgressions.
     */
    data: XOR<LoadProgressionUpdateManyMutationInput, LoadProgressionUncheckedUpdateManyInput>
    /**
     * Filter which LoadProgressions to update
     */
    where?: LoadProgressionWhereInput
  }

  /**
   * LoadProgression upsert
   */
  export type LoadProgressionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * The filter to search for the LoadProgression to update in case it exists.
     */
    where: LoadProgressionWhereUniqueInput
    /**
     * In case the LoadProgression found by the `where` argument doesn't exist, create a new LoadProgression with this data.
     */
    create: XOR<LoadProgressionCreateInput, LoadProgressionUncheckedCreateInput>
    /**
     * In case the LoadProgression was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoadProgressionUpdateInput, LoadProgressionUncheckedUpdateInput>
  }

  /**
   * LoadProgression delete
   */
  export type LoadProgressionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
    /**
     * Filter which LoadProgression to delete.
     */
    where: LoadProgressionWhereUniqueInput
  }

  /**
   * LoadProgression deleteMany
   */
  export type LoadProgressionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoadProgressions to delete
     */
    where?: LoadProgressionWhereInput
  }

  /**
   * LoadProgression without action
   */
  export type LoadProgressionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadProgression
     */
    select?: LoadProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoadProgressionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    age: 'age',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkoutsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    training: 'training',
    cardio_minutes: 'cardio_minutes',
    details: 'details',
    created_at: 'created_at'
  };

  export type WorkoutsScalarFieldEnum = (typeof WorkoutsScalarFieldEnum)[keyof typeof WorkoutsScalarFieldEnum]


  export const WeightScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    currentWeight: 'currentWeight',
    targetWeight: 'targetWeight',
    recorded_at: 'recorded_at'
  };

  export type WeightScalarFieldEnum = (typeof WeightScalarFieldEnum)[keyof typeof WeightScalarFieldEnum]


  export const LoadProgressionScalarFieldEnum: {
    id: 'id',
    workoutDetailId: 'workoutDetailId',
    exercise: 'exercise',
    date: 'date',
    currentLoad: 'currentLoad',
    goalLoad: 'goalLoad'
  };

  export type LoadProgressionScalarFieldEnum = (typeof LoadProgressionScalarFieldEnum)[keyof typeof LoadProgressionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TrainingType'
   */
  export type EnumTrainingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingType'>
    


  /**
   * Reference to a field of type 'TrainingType[]'
   */
  export type ListEnumTrainingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrainingType[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    workouts?: WorkoutsListRelationFilter
    weights?: WeightListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    age?: SortOrder
    created_at?: SortOrder
    workouts?: WorkoutsOrderByRelationAggregateInput
    weights?: WeightOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    workouts?: WorkoutsListRelationFilter
    weights?: WeightListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    age?: SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    age?: IntWithAggregatesFilter<"User"> | number
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WorkoutsWhereInput = {
    AND?: WorkoutsWhereInput | WorkoutsWhereInput[]
    OR?: WorkoutsWhereInput[]
    NOT?: WorkoutsWhereInput | WorkoutsWhereInput[]
    id?: StringFilter<"Workouts"> | string
    userId?: StringFilter<"Workouts"> | string
    training?: EnumTrainingTypeFilter<"Workouts"> | $Enums.TrainingType
    cardio_minutes?: IntFilter<"Workouts"> | number
    details?: StringNullableFilter<"Workouts"> | string | null
    created_at?: DateTimeFilter<"Workouts"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    loadProgressions?: LoadProgressionListRelationFilter
  }

  export type WorkoutsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    training?: SortOrder
    cardio_minutes?: SortOrder
    details?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    loadProgressions?: LoadProgressionOrderByRelationAggregateInput
  }

  export type WorkoutsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutsWhereInput | WorkoutsWhereInput[]
    OR?: WorkoutsWhereInput[]
    NOT?: WorkoutsWhereInput | WorkoutsWhereInput[]
    userId?: StringFilter<"Workouts"> | string
    training?: EnumTrainingTypeFilter<"Workouts"> | $Enums.TrainingType
    cardio_minutes?: IntFilter<"Workouts"> | number
    details?: StringNullableFilter<"Workouts"> | string | null
    created_at?: DateTimeFilter<"Workouts"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    loadProgressions?: LoadProgressionListRelationFilter
  }, "id">

  export type WorkoutsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    training?: SortOrder
    cardio_minutes?: SortOrder
    details?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: WorkoutsCountOrderByAggregateInput
    _avg?: WorkoutsAvgOrderByAggregateInput
    _max?: WorkoutsMaxOrderByAggregateInput
    _min?: WorkoutsMinOrderByAggregateInput
    _sum?: WorkoutsSumOrderByAggregateInput
  }

  export type WorkoutsScalarWhereWithAggregatesInput = {
    AND?: WorkoutsScalarWhereWithAggregatesInput | WorkoutsScalarWhereWithAggregatesInput[]
    OR?: WorkoutsScalarWhereWithAggregatesInput[]
    NOT?: WorkoutsScalarWhereWithAggregatesInput | WorkoutsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workouts"> | string
    userId?: StringWithAggregatesFilter<"Workouts"> | string
    training?: EnumTrainingTypeWithAggregatesFilter<"Workouts"> | $Enums.TrainingType
    cardio_minutes?: IntWithAggregatesFilter<"Workouts"> | number
    details?: StringNullableWithAggregatesFilter<"Workouts"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Workouts"> | Date | string
  }

  export type WeightWhereInput = {
    AND?: WeightWhereInput | WeightWhereInput[]
    OR?: WeightWhereInput[]
    NOT?: WeightWhereInput | WeightWhereInput[]
    id?: StringFilter<"Weight"> | string
    userId?: StringFilter<"Weight"> | string
    currentWeight?: DecimalFilter<"Weight"> | Decimal | DecimalJsLike | number | string
    targetWeight?: DecimalNullableFilter<"Weight"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFilter<"Weight"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WeightOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrderInput | SortOrder
    recorded_at?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WeightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeightWhereInput | WeightWhereInput[]
    OR?: WeightWhereInput[]
    NOT?: WeightWhereInput | WeightWhereInput[]
    userId?: StringFilter<"Weight"> | string
    currentWeight?: DecimalFilter<"Weight"> | Decimal | DecimalJsLike | number | string
    targetWeight?: DecimalNullableFilter<"Weight"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFilter<"Weight"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type WeightOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrderInput | SortOrder
    recorded_at?: SortOrder
    _count?: WeightCountOrderByAggregateInput
    _avg?: WeightAvgOrderByAggregateInput
    _max?: WeightMaxOrderByAggregateInput
    _min?: WeightMinOrderByAggregateInput
    _sum?: WeightSumOrderByAggregateInput
  }

  export type WeightScalarWhereWithAggregatesInput = {
    AND?: WeightScalarWhereWithAggregatesInput | WeightScalarWhereWithAggregatesInput[]
    OR?: WeightScalarWhereWithAggregatesInput[]
    NOT?: WeightScalarWhereWithAggregatesInput | WeightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Weight"> | string
    userId?: StringWithAggregatesFilter<"Weight"> | string
    currentWeight?: DecimalWithAggregatesFilter<"Weight"> | Decimal | DecimalJsLike | number | string
    targetWeight?: DecimalNullableWithAggregatesFilter<"Weight"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeWithAggregatesFilter<"Weight"> | Date | string
  }

  export type LoadProgressionWhereInput = {
    AND?: LoadProgressionWhereInput | LoadProgressionWhereInput[]
    OR?: LoadProgressionWhereInput[]
    NOT?: LoadProgressionWhereInput | LoadProgressionWhereInput[]
    id?: StringFilter<"LoadProgression"> | string
    workoutDetailId?: StringFilter<"LoadProgression"> | string
    exercise?: StringFilter<"LoadProgression"> | string
    date?: DateTimeFilter<"LoadProgression"> | Date | string
    currentLoad?: DecimalFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string
    goalLoad?: DecimalNullableFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string | null
    workoutDetail?: XOR<WorkoutsRelationFilter, WorkoutsWhereInput>
  }

  export type LoadProgressionOrderByWithRelationInput = {
    id?: SortOrder
    workoutDetailId?: SortOrder
    exercise?: SortOrder
    date?: SortOrder
    currentLoad?: SortOrder
    goalLoad?: SortOrderInput | SortOrder
    workoutDetail?: WorkoutsOrderByWithRelationInput
  }

  export type LoadProgressionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoadProgressionWhereInput | LoadProgressionWhereInput[]
    OR?: LoadProgressionWhereInput[]
    NOT?: LoadProgressionWhereInput | LoadProgressionWhereInput[]
    workoutDetailId?: StringFilter<"LoadProgression"> | string
    exercise?: StringFilter<"LoadProgression"> | string
    date?: DateTimeFilter<"LoadProgression"> | Date | string
    currentLoad?: DecimalFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string
    goalLoad?: DecimalNullableFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string | null
    workoutDetail?: XOR<WorkoutsRelationFilter, WorkoutsWhereInput>
  }, "id">

  export type LoadProgressionOrderByWithAggregationInput = {
    id?: SortOrder
    workoutDetailId?: SortOrder
    exercise?: SortOrder
    date?: SortOrder
    currentLoad?: SortOrder
    goalLoad?: SortOrderInput | SortOrder
    _count?: LoadProgressionCountOrderByAggregateInput
    _avg?: LoadProgressionAvgOrderByAggregateInput
    _max?: LoadProgressionMaxOrderByAggregateInput
    _min?: LoadProgressionMinOrderByAggregateInput
    _sum?: LoadProgressionSumOrderByAggregateInput
  }

  export type LoadProgressionScalarWhereWithAggregatesInput = {
    AND?: LoadProgressionScalarWhereWithAggregatesInput | LoadProgressionScalarWhereWithAggregatesInput[]
    OR?: LoadProgressionScalarWhereWithAggregatesInput[]
    NOT?: LoadProgressionScalarWhereWithAggregatesInput | LoadProgressionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LoadProgression"> | string
    workoutDetailId?: StringWithAggregatesFilter<"LoadProgression"> | string
    exercise?: StringWithAggregatesFilter<"LoadProgression"> | string
    date?: DateTimeWithAggregatesFilter<"LoadProgression"> | Date | string
    currentLoad?: DecimalWithAggregatesFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string
    goalLoad?: DecimalNullableWithAggregatesFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    workouts?: WorkoutsCreateNestedManyWithoutUserInput
    weights?: WeightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    workouts?: WorkoutsUncheckedCreateNestedManyWithoutUserInput
    weights?: WeightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutsUpdateManyWithoutUserNestedInput
    weights?: WeightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutsUncheckedUpdateManyWithoutUserNestedInput
    weights?: WeightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutsCreateInput = {
    id?: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWorkoutsInput
    loadProgressions?: LoadProgressionCreateNestedManyWithoutWorkoutDetailInput
  }

  export type WorkoutsUncheckedCreateInput = {
    id?: string
    userId: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
    loadProgressions?: LoadProgressionUncheckedCreateNestedManyWithoutWorkoutDetailInput
  }

  export type WorkoutsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutsNestedInput
    loadProgressions?: LoadProgressionUpdateManyWithoutWorkoutDetailNestedInput
  }

  export type WorkoutsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    loadProgressions?: LoadProgressionUncheckedUpdateManyWithoutWorkoutDetailNestedInput
  }

  export type WorkoutsCreateManyInput = {
    id?: string
    userId: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
  }

  export type WorkoutsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightCreateInput = {
    id?: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
    user: UserCreateNestedOneWithoutWeightsInput
  }

  export type WeightUncheckedCreateInput = {
    id?: string
    userId: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
  }

  export type WeightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeightsNestedInput
  }

  export type WeightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightCreateManyInput = {
    id?: string
    userId: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
  }

  export type WeightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoadProgressionCreateInput = {
    id?: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
    workoutDetail: WorkoutsCreateNestedOneWithoutLoadProgressionsInput
  }

  export type LoadProgressionUncheckedCreateInput = {
    id?: string
    workoutDetailId: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    workoutDetail?: WorkoutsUpdateOneRequiredWithoutLoadProgressionsNestedInput
  }

  export type LoadProgressionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutDetailId?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionCreateManyInput = {
    id?: string
    workoutDetailId: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutDetailId?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WorkoutsListRelationFilter = {
    every?: WorkoutsWhereInput
    some?: WorkoutsWhereInput
    none?: WorkoutsWhereInput
  }

  export type WeightListRelationFilter = {
    every?: WeightWhereInput
    some?: WeightWhereInput
    none?: WeightWhereInput
  }

  export type WorkoutsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    age?: SortOrder
    created_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    age?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    age?: SortOrder
    created_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTrainingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeFilter<$PrismaModel> | $Enums.TrainingType
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LoadProgressionListRelationFilter = {
    every?: LoadProgressionWhereInput
    some?: LoadProgressionWhereInput
    none?: LoadProgressionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LoadProgressionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    training?: SortOrder
    cardio_minutes?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type WorkoutsAvgOrderByAggregateInput = {
    cardio_minutes?: SortOrder
  }

  export type WorkoutsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    training?: SortOrder
    cardio_minutes?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type WorkoutsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    training?: SortOrder
    cardio_minutes?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type WorkoutsSumOrderByAggregateInput = {
    cardio_minutes?: SortOrder
  }

  export type EnumTrainingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel> | $Enums.TrainingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingTypeFilter<$PrismaModel>
    _max?: NestedEnumTrainingTypeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type WeightCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    recorded_at?: SortOrder
  }

  export type WeightAvgOrderByAggregateInput = {
    currentWeight?: SortOrder
    targetWeight?: SortOrder
  }

  export type WeightMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    recorded_at?: SortOrder
  }

  export type WeightMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    recorded_at?: SortOrder
  }

  export type WeightSumOrderByAggregateInput = {
    currentWeight?: SortOrder
    targetWeight?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type WorkoutsRelationFilter = {
    is?: WorkoutsWhereInput
    isNot?: WorkoutsWhereInput
  }

  export type LoadProgressionCountOrderByAggregateInput = {
    id?: SortOrder
    workoutDetailId?: SortOrder
    exercise?: SortOrder
    date?: SortOrder
    currentLoad?: SortOrder
    goalLoad?: SortOrder
  }

  export type LoadProgressionAvgOrderByAggregateInput = {
    currentLoad?: SortOrder
    goalLoad?: SortOrder
  }

  export type LoadProgressionMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutDetailId?: SortOrder
    exercise?: SortOrder
    date?: SortOrder
    currentLoad?: SortOrder
    goalLoad?: SortOrder
  }

  export type LoadProgressionMinOrderByAggregateInput = {
    id?: SortOrder
    workoutDetailId?: SortOrder
    exercise?: SortOrder
    date?: SortOrder
    currentLoad?: SortOrder
    goalLoad?: SortOrder
  }

  export type LoadProgressionSumOrderByAggregateInput = {
    currentLoad?: SortOrder
    goalLoad?: SortOrder
  }

  export type WorkoutsCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput> | WorkoutsCreateWithoutUserInput[] | WorkoutsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutsCreateOrConnectWithoutUserInput | WorkoutsCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutsCreateManyUserInputEnvelope
    connect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
  }

  export type WeightCreateNestedManyWithoutUserInput = {
    create?: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput> | WeightCreateWithoutUserInput[] | WeightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightCreateOrConnectWithoutUserInput | WeightCreateOrConnectWithoutUserInput[]
    createMany?: WeightCreateManyUserInputEnvelope
    connect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
  }

  export type WorkoutsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput> | WorkoutsCreateWithoutUserInput[] | WorkoutsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutsCreateOrConnectWithoutUserInput | WorkoutsCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutsCreateManyUserInputEnvelope
    connect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
  }

  export type WeightUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput> | WeightCreateWithoutUserInput[] | WeightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightCreateOrConnectWithoutUserInput | WeightCreateOrConnectWithoutUserInput[]
    createMany?: WeightCreateManyUserInputEnvelope
    connect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WorkoutsUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput> | WorkoutsCreateWithoutUserInput[] | WorkoutsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutsCreateOrConnectWithoutUserInput | WorkoutsCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutsUpsertWithWhereUniqueWithoutUserInput | WorkoutsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutsCreateManyUserInputEnvelope
    set?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    disconnect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    delete?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    connect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    update?: WorkoutsUpdateWithWhereUniqueWithoutUserInput | WorkoutsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutsUpdateManyWithWhereWithoutUserInput | WorkoutsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutsScalarWhereInput | WorkoutsScalarWhereInput[]
  }

  export type WeightUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput> | WeightCreateWithoutUserInput[] | WeightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightCreateOrConnectWithoutUserInput | WeightCreateOrConnectWithoutUserInput[]
    upsert?: WeightUpsertWithWhereUniqueWithoutUserInput | WeightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeightCreateManyUserInputEnvelope
    set?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    disconnect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    delete?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    connect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    update?: WeightUpdateWithWhereUniqueWithoutUserInput | WeightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeightUpdateManyWithWhereWithoutUserInput | WeightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeightScalarWhereInput | WeightScalarWhereInput[]
  }

  export type WorkoutsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput> | WorkoutsCreateWithoutUserInput[] | WorkoutsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutsCreateOrConnectWithoutUserInput | WorkoutsCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutsUpsertWithWhereUniqueWithoutUserInput | WorkoutsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutsCreateManyUserInputEnvelope
    set?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    disconnect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    delete?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    connect?: WorkoutsWhereUniqueInput | WorkoutsWhereUniqueInput[]
    update?: WorkoutsUpdateWithWhereUniqueWithoutUserInput | WorkoutsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutsUpdateManyWithWhereWithoutUserInput | WorkoutsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutsScalarWhereInput | WorkoutsScalarWhereInput[]
  }

  export type WeightUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput> | WeightCreateWithoutUserInput[] | WeightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightCreateOrConnectWithoutUserInput | WeightCreateOrConnectWithoutUserInput[]
    upsert?: WeightUpsertWithWhereUniqueWithoutUserInput | WeightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeightCreateManyUserInputEnvelope
    set?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    disconnect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    delete?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    connect?: WeightWhereUniqueInput | WeightWhereUniqueInput[]
    update?: WeightUpdateWithWhereUniqueWithoutUserInput | WeightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeightUpdateManyWithWhereWithoutUserInput | WeightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeightScalarWhereInput | WeightScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    connect?: UserWhereUniqueInput
  }

  export type LoadProgressionCreateNestedManyWithoutWorkoutDetailInput = {
    create?: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput> | LoadProgressionCreateWithoutWorkoutDetailInput[] | LoadProgressionUncheckedCreateWithoutWorkoutDetailInput[]
    connectOrCreate?: LoadProgressionCreateOrConnectWithoutWorkoutDetailInput | LoadProgressionCreateOrConnectWithoutWorkoutDetailInput[]
    createMany?: LoadProgressionCreateManyWorkoutDetailInputEnvelope
    connect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
  }

  export type LoadProgressionUncheckedCreateNestedManyWithoutWorkoutDetailInput = {
    create?: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput> | LoadProgressionCreateWithoutWorkoutDetailInput[] | LoadProgressionUncheckedCreateWithoutWorkoutDetailInput[]
    connectOrCreate?: LoadProgressionCreateOrConnectWithoutWorkoutDetailInput | LoadProgressionCreateOrConnectWithoutWorkoutDetailInput[]
    createMany?: LoadProgressionCreateManyWorkoutDetailInputEnvelope
    connect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
  }

  export type EnumTrainingTypeFieldUpdateOperationsInput = {
    set?: $Enums.TrainingType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutsInput
    upsert?: UserUpsertWithoutWorkoutsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutsInput, UserUpdateWithoutWorkoutsInput>, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type LoadProgressionUpdateManyWithoutWorkoutDetailNestedInput = {
    create?: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput> | LoadProgressionCreateWithoutWorkoutDetailInput[] | LoadProgressionUncheckedCreateWithoutWorkoutDetailInput[]
    connectOrCreate?: LoadProgressionCreateOrConnectWithoutWorkoutDetailInput | LoadProgressionCreateOrConnectWithoutWorkoutDetailInput[]
    upsert?: LoadProgressionUpsertWithWhereUniqueWithoutWorkoutDetailInput | LoadProgressionUpsertWithWhereUniqueWithoutWorkoutDetailInput[]
    createMany?: LoadProgressionCreateManyWorkoutDetailInputEnvelope
    set?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    disconnect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    delete?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    connect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    update?: LoadProgressionUpdateWithWhereUniqueWithoutWorkoutDetailInput | LoadProgressionUpdateWithWhereUniqueWithoutWorkoutDetailInput[]
    updateMany?: LoadProgressionUpdateManyWithWhereWithoutWorkoutDetailInput | LoadProgressionUpdateManyWithWhereWithoutWorkoutDetailInput[]
    deleteMany?: LoadProgressionScalarWhereInput | LoadProgressionScalarWhereInput[]
  }

  export type LoadProgressionUncheckedUpdateManyWithoutWorkoutDetailNestedInput = {
    create?: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput> | LoadProgressionCreateWithoutWorkoutDetailInput[] | LoadProgressionUncheckedCreateWithoutWorkoutDetailInput[]
    connectOrCreate?: LoadProgressionCreateOrConnectWithoutWorkoutDetailInput | LoadProgressionCreateOrConnectWithoutWorkoutDetailInput[]
    upsert?: LoadProgressionUpsertWithWhereUniqueWithoutWorkoutDetailInput | LoadProgressionUpsertWithWhereUniqueWithoutWorkoutDetailInput[]
    createMany?: LoadProgressionCreateManyWorkoutDetailInputEnvelope
    set?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    disconnect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    delete?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    connect?: LoadProgressionWhereUniqueInput | LoadProgressionWhereUniqueInput[]
    update?: LoadProgressionUpdateWithWhereUniqueWithoutWorkoutDetailInput | LoadProgressionUpdateWithWhereUniqueWithoutWorkoutDetailInput[]
    updateMany?: LoadProgressionUpdateManyWithWhereWithoutWorkoutDetailInput | LoadProgressionUpdateManyWithWhereWithoutWorkoutDetailInput[]
    deleteMany?: LoadProgressionScalarWhereInput | LoadProgressionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWeightsInput = {
    create?: XOR<UserCreateWithoutWeightsInput, UserUncheckedCreateWithoutWeightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeightsInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutWeightsNestedInput = {
    create?: XOR<UserCreateWithoutWeightsInput, UserUncheckedCreateWithoutWeightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeightsInput
    upsert?: UserUpsertWithoutWeightsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeightsInput, UserUpdateWithoutWeightsInput>, UserUncheckedUpdateWithoutWeightsInput>
  }

  export type WorkoutsCreateNestedOneWithoutLoadProgressionsInput = {
    create?: XOR<WorkoutsCreateWithoutLoadProgressionsInput, WorkoutsUncheckedCreateWithoutLoadProgressionsInput>
    connectOrCreate?: WorkoutsCreateOrConnectWithoutLoadProgressionsInput
    connect?: WorkoutsWhereUniqueInput
  }

  export type WorkoutsUpdateOneRequiredWithoutLoadProgressionsNestedInput = {
    create?: XOR<WorkoutsCreateWithoutLoadProgressionsInput, WorkoutsUncheckedCreateWithoutLoadProgressionsInput>
    connectOrCreate?: WorkoutsCreateOrConnectWithoutLoadProgressionsInput
    upsert?: WorkoutsUpsertWithoutLoadProgressionsInput
    connect?: WorkoutsWhereUniqueInput
    update?: XOR<XOR<WorkoutsUpdateToOneWithWhereWithoutLoadProgressionsInput, WorkoutsUpdateWithoutLoadProgressionsInput>, WorkoutsUncheckedUpdateWithoutLoadProgressionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTrainingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeFilter<$PrismaModel> | $Enums.TrainingType
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TrainingType | EnumTrainingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TrainingType[] | ListEnumTrainingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTrainingTypeWithAggregatesFilter<$PrismaModel> | $Enums.TrainingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTrainingTypeFilter<$PrismaModel>
    _max?: NestedEnumTrainingTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type WorkoutsCreateWithoutUserInput = {
    id?: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
    loadProgressions?: LoadProgressionCreateNestedManyWithoutWorkoutDetailInput
  }

  export type WorkoutsUncheckedCreateWithoutUserInput = {
    id?: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
    loadProgressions?: LoadProgressionUncheckedCreateNestedManyWithoutWorkoutDetailInput
  }

  export type WorkoutsCreateOrConnectWithoutUserInput = {
    where: WorkoutsWhereUniqueInput
    create: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput>
  }

  export type WorkoutsCreateManyUserInputEnvelope = {
    data: WorkoutsCreateManyUserInput | WorkoutsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeightCreateWithoutUserInput = {
    id?: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
  }

  export type WeightUncheckedCreateWithoutUserInput = {
    id?: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
  }

  export type WeightCreateOrConnectWithoutUserInput = {
    where: WeightWhereUniqueInput
    create: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput>
  }

  export type WeightCreateManyUserInputEnvelope = {
    data: WeightCreateManyUserInput | WeightCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutsUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutsWhereUniqueInput
    update: XOR<WorkoutsUpdateWithoutUserInput, WorkoutsUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutsCreateWithoutUserInput, WorkoutsUncheckedCreateWithoutUserInput>
  }

  export type WorkoutsUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutsWhereUniqueInput
    data: XOR<WorkoutsUpdateWithoutUserInput, WorkoutsUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutsUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutsScalarWhereInput
    data: XOR<WorkoutsUpdateManyMutationInput, WorkoutsUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutsScalarWhereInput = {
    AND?: WorkoutsScalarWhereInput | WorkoutsScalarWhereInput[]
    OR?: WorkoutsScalarWhereInput[]
    NOT?: WorkoutsScalarWhereInput | WorkoutsScalarWhereInput[]
    id?: StringFilter<"Workouts"> | string
    userId?: StringFilter<"Workouts"> | string
    training?: EnumTrainingTypeFilter<"Workouts"> | $Enums.TrainingType
    cardio_minutes?: IntFilter<"Workouts"> | number
    details?: StringNullableFilter<"Workouts"> | string | null
    created_at?: DateTimeFilter<"Workouts"> | Date | string
  }

  export type WeightUpsertWithWhereUniqueWithoutUserInput = {
    where: WeightWhereUniqueInput
    update: XOR<WeightUpdateWithoutUserInput, WeightUncheckedUpdateWithoutUserInput>
    create: XOR<WeightCreateWithoutUserInput, WeightUncheckedCreateWithoutUserInput>
  }

  export type WeightUpdateWithWhereUniqueWithoutUserInput = {
    where: WeightWhereUniqueInput
    data: XOR<WeightUpdateWithoutUserInput, WeightUncheckedUpdateWithoutUserInput>
  }

  export type WeightUpdateManyWithWhereWithoutUserInput = {
    where: WeightScalarWhereInput
    data: XOR<WeightUpdateManyMutationInput, WeightUncheckedUpdateManyWithoutUserInput>
  }

  export type WeightScalarWhereInput = {
    AND?: WeightScalarWhereInput | WeightScalarWhereInput[]
    OR?: WeightScalarWhereInput[]
    NOT?: WeightScalarWhereInput | WeightScalarWhereInput[]
    id?: StringFilter<"Weight"> | string
    userId?: StringFilter<"Weight"> | string
    currentWeight?: DecimalFilter<"Weight"> | Decimal | DecimalJsLike | number | string
    targetWeight?: DecimalNullableFilter<"Weight"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFilter<"Weight"> | Date | string
  }

  export type UserCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    weights?: WeightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    weights?: WeightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
  }

  export type LoadProgressionCreateWithoutWorkoutDetailInput = {
    id?: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUncheckedCreateWithoutWorkoutDetailInput = {
    id?: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionCreateOrConnectWithoutWorkoutDetailInput = {
    where: LoadProgressionWhereUniqueInput
    create: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput>
  }

  export type LoadProgressionCreateManyWorkoutDetailInputEnvelope = {
    data: LoadProgressionCreateManyWorkoutDetailInput | LoadProgressionCreateManyWorkoutDetailInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutsInput = {
    update: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<UserCreateWithoutWorkoutsInput, UserUncheckedCreateWithoutWorkoutsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutsInput, UserUncheckedUpdateWithoutWorkoutsInput>
  }

  export type UserUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weights?: WeightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weights?: WeightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LoadProgressionUpsertWithWhereUniqueWithoutWorkoutDetailInput = {
    where: LoadProgressionWhereUniqueInput
    update: XOR<LoadProgressionUpdateWithoutWorkoutDetailInput, LoadProgressionUncheckedUpdateWithoutWorkoutDetailInput>
    create: XOR<LoadProgressionCreateWithoutWorkoutDetailInput, LoadProgressionUncheckedCreateWithoutWorkoutDetailInput>
  }

  export type LoadProgressionUpdateWithWhereUniqueWithoutWorkoutDetailInput = {
    where: LoadProgressionWhereUniqueInput
    data: XOR<LoadProgressionUpdateWithoutWorkoutDetailInput, LoadProgressionUncheckedUpdateWithoutWorkoutDetailInput>
  }

  export type LoadProgressionUpdateManyWithWhereWithoutWorkoutDetailInput = {
    where: LoadProgressionScalarWhereInput
    data: XOR<LoadProgressionUpdateManyMutationInput, LoadProgressionUncheckedUpdateManyWithoutWorkoutDetailInput>
  }

  export type LoadProgressionScalarWhereInput = {
    AND?: LoadProgressionScalarWhereInput | LoadProgressionScalarWhereInput[]
    OR?: LoadProgressionScalarWhereInput[]
    NOT?: LoadProgressionScalarWhereInput | LoadProgressionScalarWhereInput[]
    id?: StringFilter<"LoadProgression"> | string
    workoutDetailId?: StringFilter<"LoadProgression"> | string
    exercise?: StringFilter<"LoadProgression"> | string
    date?: DateTimeFilter<"LoadProgression"> | Date | string
    currentLoad?: DecimalFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string
    goalLoad?: DecimalNullableFilter<"LoadProgression"> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserCreateWithoutWeightsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    workouts?: WorkoutsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWeightsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    age: number
    created_at?: Date | string
    workouts?: WorkoutsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWeightsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeightsInput, UserUncheckedCreateWithoutWeightsInput>
  }

  export type UserUpsertWithoutWeightsInput = {
    update: XOR<UserUpdateWithoutWeightsInput, UserUncheckedUpdateWithoutWeightsInput>
    create: XOR<UserCreateWithoutWeightsInput, UserUncheckedCreateWithoutWeightsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeightsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeightsInput, UserUncheckedUpdateWithoutWeightsInput>
  }

  export type UserUpdateWithoutWeightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWeightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutsCreateWithoutLoadProgressionsInput = {
    id?: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutsUncheckedCreateWithoutLoadProgressionsInput = {
    id?: string
    userId: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
  }

  export type WorkoutsCreateOrConnectWithoutLoadProgressionsInput = {
    where: WorkoutsWhereUniqueInput
    create: XOR<WorkoutsCreateWithoutLoadProgressionsInput, WorkoutsUncheckedCreateWithoutLoadProgressionsInput>
  }

  export type WorkoutsUpsertWithoutLoadProgressionsInput = {
    update: XOR<WorkoutsUpdateWithoutLoadProgressionsInput, WorkoutsUncheckedUpdateWithoutLoadProgressionsInput>
    create: XOR<WorkoutsCreateWithoutLoadProgressionsInput, WorkoutsUncheckedCreateWithoutLoadProgressionsInput>
    where?: WorkoutsWhereInput
  }

  export type WorkoutsUpdateToOneWithWhereWithoutLoadProgressionsInput = {
    where?: WorkoutsWhereInput
    data: XOR<WorkoutsUpdateWithoutLoadProgressionsInput, WorkoutsUncheckedUpdateWithoutLoadProgressionsInput>
  }

  export type WorkoutsUpdateWithoutLoadProgressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutsUncheckedUpdateWithoutLoadProgressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutsCreateManyUserInput = {
    id?: string
    training?: $Enums.TrainingType
    cardio_minutes?: number
    details?: string | null
    created_at?: Date | string
  }

  export type WeightCreateManyUserInput = {
    id?: string
    currentWeight: Decimal | DecimalJsLike | number | string
    targetWeight?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string
  }

  export type WorkoutsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    loadProgressions?: LoadProgressionUpdateManyWithoutWorkoutDetailNestedInput
  }

  export type WorkoutsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    loadProgressions?: LoadProgressionUncheckedUpdateManyWithoutWorkoutDetailNestedInput
  }

  export type WorkoutsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    training?: EnumTrainingTypeFieldUpdateOperationsInput | $Enums.TrainingType
    cardio_minutes?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentWeight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetWeight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoadProgressionCreateManyWorkoutDetailInput = {
    id?: string
    exercise: string
    date?: Date | string
    currentLoad: Decimal | DecimalJsLike | number | string
    goalLoad?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUpdateWithoutWorkoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUncheckedUpdateWithoutWorkoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadProgressionUncheckedUpdateManyWithoutWorkoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    exercise?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentLoad?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    goalLoad?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutsCountOutputTypeDefaultArgs instead
     */
    export type WorkoutsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutsDefaultArgs instead
     */
    export type WorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeightDefaultArgs instead
     */
    export type WeightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoadProgressionDefaultArgs instead
     */
    export type LoadProgressionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoadProgressionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}