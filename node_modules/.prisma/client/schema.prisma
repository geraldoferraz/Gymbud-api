generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TrainingType {
  Peito
  Triceps
  Costas
  Biceps
  Ombro
  Perna
  Posterior_de_coxa
  Gluteo
  DayOff
}

//o @id garante que aquele atributo é o id e ele sera uma primary key da tabela user

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password_hash String
  age         Int
  created_at  DateTime  @default(now())
  workouts    Workouts[]
  weights     Weight[]
}

model Workouts {
  id            String          @id @default(uuid())
  userId        String          // Chave estrangeira
  user          User            @relation(fields: [userId], references: [id])
  training      TrainingType    @default(DayOff)
  cardio_minutes Int            @default(0)
  details       String?
  created_at    DateTime        @default(now())
  loadProgressions LoadProgression[]
}

//Cada Workout está diretamente associado a um User através de userId.

model Weight {
  id          String    @id @default(uuid())
  userId      String    //Chave estrangeira
  user        User      @relation(fields: [userId], references: [id]) //vai ajudar nas consultas futuras, pois mostra a relacao do atributo com outra tabela 
  currentWeight Decimal
  targetWeight Decimal?
  recorded_at DateTime  @default(now())
}

model LoadProgression {
  id             String    @id @default(uuid())
  workoutDetailId String
  workoutDetail  Workouts  @relation(fields: [workoutDetailId], references: [id])
  exercise       String    // Nome do exercício realizado
  date           DateTime  @default(now())
  currentLoad    Decimal   // Carga usada no último treino
  goalLoad       Decimal?  // Próximo objetivo de carga (opcional)
}


// Registro do Treino:
// O usuário começa realizando um treino de peito, incluindo exercícios como supino. Após o treino, ele acessa o sistema para registrar as atividades realizadas.

// Entrada de Dados:

// O usuário entra na interface do sistema onde ele pode adicionar um novo treino.
// Ele seleciona o tipo de treino (por exemplo, Peito) e adiciona detalhes como a duração do cardio e observações gerais sobre o treino.
// Ele submete as informações, que são salvas na tabela Workouts.
// Registro de Progressão de Carga:

// Após registrar o treino, o usuário procede para registrar a progressão de carga para o exercício de supino.
// Ele especifica o exercício realizado ("Supino"), a carga usada no treino atual (35kg), a carga usada no último treino (30kg), e, opcionalmente, estabelece um novo objetivo de carga (40kg).
// Essas informações são submetidas e salvas na tabela LoadProgression, associadas ao treino específico que ele acabou de registrar.